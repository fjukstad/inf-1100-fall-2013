Programming in C
10 september 2013



Bj√∏rn Fjukstad
bjorn.fjukstad@uit.no

* The C Programming Language

- Initially developed by Dennis Ritchie between 1969 and 1973
- One of most widely used programming languages
- Statically typed unlike Python 
- Compiled language unlike Java

* C Basics

* C Program Structure

A C program usually has the following form: 

- Preprocessor commands
- Type definitions
- Function prototypes (declarations) 
- Variables
- Functions

Every C program has a _main_ function

* Functions

A function looks something like this: 


    type function_name (parameters) {
        local variables
        C statements
    }

A basic function: 

    int main (void) {
        printf("Hello world \n"); 
        return 0; 
    }

Remember that all statements must be followed by a ;



* Data types

C has the following data types: 

- _char_ (1 byte) 
- _unsigned_ _char_ (1 byte) 
- _short_ _int_ (2 bytes) 
- _unsigned_ _short_ _int_ (2 bytes) 
- _int_ (4 bytes) 
- _float_ (4 bytes) 
- _double_ (8 bytes) 

Note that there is no _boolean_ type, must use _chars_ or _ints_.


* Declaring variables

Variables are declared in the following fashion: 

    type name optional initialization

For example

    int age = 23; 

or 

    char letter = 'A'; 

or 
    
    float pi = 3.14; 


* Variable Scope

- Global scope, every function can use it

    int a = 0; 

    void func1 (void) {
        a = a + 1; 
        printf("Value of a: %d \n", a); 
    }

    void func2 (void) {
        a = a + 2; 
        printf("Value of a: %d \n", a); 
    }

- Scope Inside Blocks

    int a = 1; 
    
    void main (void) {
        float b = a * 0.1; 
    }

Cannot access the variable _b_ outside the main function. 

* Printing Variables

This is something you'll be doing a lot! C uses formatted output, using a
special formatting character _%_

- _%c_ is for characters
- _%s_ is for strings of characters
- _%d_ is for integers
- _%f_ is for floats
- _%x_ is for hexadecimal integer
- _%e_ is for lowercase scientific notation (exponent) 
- There are many more! 


* Constants

If you need a variable where its value is not going be changed, you can declare a
constant. 

For example

    const int a = 1; 


* Arithmetic Operations

First we have the standard arithmetic operators: 

- + (addition)
- - (subtraction)
- * (multiplication)
- / (division) 

We also have

- ++ (increment)
- -- (decrement)
- % (modulus)
- _**_ (power) 

* Comparison Operators

- Equality: ==
- Not equal: != 
- Less than: <
- Less than or equal: <= 
- Greater than: > 
- Greater than or equal: >= 

* Logical Operators

- Logical AND: &&
- Logical OR: ||
- Logical NOT: ! 

* Conditionals 

* The if Statement

It has three basic forms: 

    if (expression) 
        statement

or 

    if (expression)
        statement 1
    else
        statement 2

or 

    if (expression)
        statement 1
    else if (expression) 
        statement 2
    else 
        statement 3

* The if Statement (example) 

A simple function that checks if integer a is greater than integer b. It will
return -1 if it is less than b, 0 if they are equal, and 1 if it is greater
than b. 

    int greater_than(int a, int b) {
        if (a < b) {
            return -1
        }
        else if (a > b) {
            return 1; 
        }
        else {
            return 0; 
        }

* The switch statement

    switch(expression) {
        case item 1:
            statement 1
            break
        case item 2:
            statement 2
            break
            
            ...

        default:
            statement
            break
    }


* The switch statement (example) 
    
    void print_day(int day) {
        switch(day)
            case 1:
                printf("It's Monday!\n"); 
                break; 
            case 2:
                printf("It's Tuesday!\n"); 
                break; 
            
                ....

* Looping and Iteration

* The for Statement

It has the form: 

    for(expression 1; expression 2; expression 3) {
        statements
    }

Example: 

    int days_in_a_week = 7; 
    int day; 

    for (day = 1; day <= days_in_a_week; day++){
        print_day(day);
    }


* The while Statement

It has the form: 
    
    while(expression)
        statements

Example
    int days_in_a_week = 7; 
    int day = 1; 

    while(day <= days_in_a_week) {
        print_day(day)
        day++
    }

* break and continue

To control the way we loop, we have _break_ and _continue_ 

- A _break_ statement will exit a loop or switch
- A _continue_ will skip current iteration of loop. 


* Arrays and Strings

* Further Data Types

* Pointers

* Dynamic Memory Allocation and Dynamic Structures


# http://www.cs.cf.ac.uk/Dave/C/CE.html

